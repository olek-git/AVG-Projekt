/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import io.grpc.Grpc;
import io.grpc.InsecureServerCredentials;
import io.grpc.Server;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.example.grpc.ErpServiceImpl;

public class App {
  private static final Logger logger = Logger.getLogger(App.class.getName());

    private Server server;

    private void start() throws IOException {
        int port = 50051;

        server = Grpc.newServerBuilderForPort(port, InsecureServerCredentials.create())
                .addService(new ErpServiceImpl())
                .build()
                .start();

        logger.info("Server laeuft auf Port " + port);

        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.err.println("*** Server wird beendet...");
            try {
                stop();
            } catch (InterruptedException e) {
                e.printStackTrace(System.err);
            }
            System.err.println("*** Server wurde beendet.");
        }));
    }

    private void stop() throws InterruptedException {
        if (server != null) {
            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);
        }
    }

    private void blockUntilShutdown() throws InterruptedException {
        if (server != null) {
            server.awaitTermination();
        }
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        final App server = new App();
        server.start();
        server.blockUntilShutdown();
    }
}
